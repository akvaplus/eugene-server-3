User and Session Management System Specifications

Overview:
This document outlines the endpoints and views for a Node.js Express application designed for user and session management. The system includes user authentication, email verification, admin restrictions, and CRUD operations for both users and sessions.

API Endpoints:

Users:
- GET /user/api - Retrieve all users (JSON response)
- GET /user/api/:id - Retrieve a specific user by ID (JSON response)
- POST /user/api - Create a new user (JSON response)
- PATCH /user/api/:id - Update a specific user by ID (JSON response)
- DELETE /user/api/:id - Delete a specific user by ID (JSON response)

Sessions:
- GET /session/api - Retrieve all sessions (JSON response)
- GET /session/api/:id - Retrieve a specific session by ID (JSON response)
- POST /session/api - Create a new session (JSON response)
- PATCH /session/api/:id - Update a specific session by ID (JSON response)
- DELETE /session/api/:id - Delete a specific session by ID (JSON response)
- GET /session/api/user/:userId - Retrieve sessions for a specific user by user ID (JSON response)

Authentication:
- POST /auth/login - Authenticate a user with username or email and password
- POST /auth/register - Register a new user with required fields
- GET /auth/logout - Log out the current user

View Endpoints:

Users:
- GET /user - List all users (Admin only)
- GET /user/new - Form to create a new user
- GET /user/:id - View a specific user's details
- GET /user/:id/edit - Form to edit a specific user's details
- POST /user - Create a new user
- PATCH /user/:id - Update a specific user's details
- POST /user/:id/delete - Delete a specific user and their associated sessions (Admin or self only)
- POST /user/:id/password - Update a specific user's password
- GET /user/verify-email/:token - Verify a user's email address via token

Sessions:
- GET /session - List sessions (All for Admin, user-specific for non-Admin)
- GET /session/new - Form to create a new session
- GET /session/:id - View a specific session's details
- GET /session/:id/edit - Form to edit a specific session
- POST /session - Create a new session
- PATCH /session/:id - Update a specific session
- DELETE /session/:id - Delete a specific session

Home and Authentication:
- GET / - Home page with login and registration forms (toggle between them)
- POST /auth/login - Login form submission
- POST /auth/register - Registration form submission
- GET /auth/logout - Logout action

Features and Restrictions:
- User Authentication: All views except the home page require login. Login can be done with either username or email.
- Admin Restrictions: Only admin users can view all users (/user) and create sessions for other users. Non-admin users are restricted to their own profile and sessions.
- Session Management: Non-admin users can only create/edit sessions for themselves, with user ID hidden in forms. Admin users can manage sessions for any user.
- Email Verification: Upon registration, a verification email is sent if the email service is configured.
- Navigation: Header shows 'Home' for non-logged-in users. For logged-in users, it shows 'My Profile', 'Sessions', and 'Logout'. For admin users, 'My Profile' is replaced with 'Users' to access the full user list.
- User Deletion: Users can delete their own account, and admins can delete any user. Deletion removes the user and all associated sessions.
- UI: Uses Bootstrap for a modern look, with a dark-themed header and footer. Flash messages have been removed from the project.

Notes:
- All redirects using 'back' have been updated to use req.get('Referrer') || '/' to address deprecation warnings.
- The system no longer uses flash messages for success or error notifications.
- This document will be updated as the application evolves with additional features or changes.

If you have any questions or need further clarification on any endpoint, please contact the development team. 